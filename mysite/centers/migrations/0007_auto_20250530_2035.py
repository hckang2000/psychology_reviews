# Generated by Django 5.0.2 on 2025-05-30 11:35

from django.db import migrations, connection


def update_foreign_keys(apps, schema_editor):
    """
    Foreign Key 제약 조건을 CASCADE로 수정
    PostgreSQL과 SQLite 모두 호환
    """
    with connection.cursor() as cursor:
        # 데이터베이스 엔진 확인
        engine = connection.vendor
        
        if engine == 'sqlite':
            # SQLite: PRAGMA를 사용하여 Foreign Key 제약 조건 수정
            cursor.execute("PRAGMA foreign_keys = OFF;")
            
            # CenterImage 테이블 재생성
            cursor.execute("""
                CREATE TABLE centers_centerimage_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    image VARCHAR(100) NOT NULL,
                    created_at DATETIME NOT NULL,
                    center_id BIGINT NOT NULL REFERENCES centers_center(id) ON DELETE CASCADE
                );
            """)
            
            cursor.execute("""
                INSERT INTO centers_centerimage_new 
                SELECT id, image, created_at, center_id FROM centers_centerimage;
            """)
            
            cursor.execute("DROP TABLE centers_centerimage;")
            cursor.execute("ALTER TABLE centers_centerimage_new RENAME TO centers_centerimage;")
            
            # Therapist 테이블 재생성
            cursor.execute("""
                CREATE TABLE centers_therapist_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name VARCHAR(50) NOT NULL,
                    specialty VARCHAR(100) NOT NULL,
                    description TEXT NOT NULL,
                    photo VARCHAR(100),
                    experience INTEGER UNSIGNED NOT NULL,
                    created_at DATETIME NOT NULL,
                    updated_at DATETIME NOT NULL,
                    center_id BIGINT NOT NULL REFERENCES centers_center(id) ON DELETE CASCADE
                );
            """)
            
            cursor.execute("""
                INSERT INTO centers_therapist_new 
                SELECT id, name, specialty, description, photo, experience, created_at, updated_at, center_id 
                FROM centers_therapist;
            """)
            
            cursor.execute("DROP TABLE centers_therapist;")
            cursor.execute("ALTER TABLE centers_therapist_new RENAME TO centers_therapist;")
            
            # Review 테이블 재생성
            cursor.execute("""
                CREATE TABLE centers_review_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title VARCHAR(100) NOT NULL,
                    content TEXT NOT NULL,
                    rating INTEGER NOT NULL,
                    date DATE NOT NULL,
                    url VARCHAR(200) NOT NULL,
                    created_at DATETIME NOT NULL,
                    updated_at DATETIME NOT NULL,
                    likes INTEGER UNSIGNED NOT NULL,
                    dislikes INTEGER UNSIGNED NOT NULL,
                    center_id BIGINT NOT NULL REFERENCES centers_center(id) ON DELETE CASCADE,
                    user_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE
                );
            """)
            
            cursor.execute("""
                INSERT INTO centers_review_new 
                SELECT id, title, content, rating, date, url, created_at, updated_at, likes, dislikes, center_id, user_id 
                FROM centers_review;
            """)
            
            cursor.execute("DROP TABLE centers_review;")
            cursor.execute("ALTER TABLE centers_review_new RENAME TO centers_review;")
            
            # ExternalReview 테이블 재생성
            cursor.execute("""
                CREATE TABLE centers_externalreview_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title VARCHAR(255) NOT NULL,
                    url VARCHAR(200) NOT NULL,
                    summary VARCHAR(100) NOT NULL,
                    source VARCHAR(50) NOT NULL,
                    created_at DATETIME NOT NULL,
                    likes INTEGER UNSIGNED NOT NULL,
                    dislikes INTEGER UNSIGNED NOT NULL,
                    center_id BIGINT NOT NULL REFERENCES centers_center(id) ON DELETE CASCADE
                );
            """)
            
            cursor.execute("""
                INSERT INTO centers_externalreview_new 
                SELECT id, title, url, summary, source, created_at, likes, dislikes, center_id 
                FROM centers_externalreview;
            """)
            
            cursor.execute("DROP TABLE centers_externalreview;")
            cursor.execute("ALTER TABLE centers_externalreview_new RENAME TO centers_externalreview;")
            
            # ReviewComment 테이블 재생성
            cursor.execute("""
                CREATE TABLE centers_reviewcomment_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content TEXT NOT NULL,
                    created_at DATETIME NOT NULL,
                    updated_at DATETIME NOT NULL,
                    is_active BOOLEAN NOT NULL,
                    author_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
                    review_id BIGINT NOT NULL REFERENCES centers_review(id) ON DELETE CASCADE
                );
            """)
            
            cursor.execute("""
                INSERT INTO centers_reviewcomment_new 
                SELECT id, content, created_at, updated_at, is_active, author_id, review_id 
                FROM centers_reviewcomment;
            """)
            
            cursor.execute("DROP TABLE centers_reviewcomment;")
            cursor.execute("ALTER TABLE centers_reviewcomment_new RENAME TO centers_reviewcomment;")
            
            cursor.execute("PRAGMA foreign_keys = ON;")
            
        elif engine == 'postgresql':
            # PostgreSQL: ALTER TABLE을 사용하여 Foreign Key 제약 조건 수정
            
            # 기존 제약 조건 삭제 및 CASCADE 옵션으로 재생성
            constraint_updates = [
                # CenterImage 테이블
                {
                    'table': 'centers_centerimage',
                    'constraint_name': 'centers_centerimage_center_id_fkey',
                    'column': 'center_id',
                    'references': 'centers_center(id)'
                },
                # Therapist 테이블
                {
                    'table': 'centers_therapist',
                    'constraint_name': 'centers_therapist_center_id_fkey',
                    'column': 'center_id',
                    'references': 'centers_center(id)'
                },
                # Review 테이블
                {
                    'table': 'centers_review',
                    'constraint_name': 'centers_review_center_id_fkey',
                    'column': 'center_id',
                    'references': 'centers_center(id)'
                },
                {
                    'table': 'centers_review',
                    'constraint_name': 'centers_review_user_id_fkey',
                    'column': 'user_id',
                    'references': 'auth_user(id)'
                },
                # ExternalReview 테이블
                {
                    'table': 'centers_externalreview',
                    'constraint_name': 'centers_externalreview_center_id_fkey',
                    'column': 'center_id',
                    'references': 'centers_center(id)'
                },
                # ReviewComment 테이블
                {
                    'table': 'centers_reviewcomment',
                    'constraint_name': 'centers_reviewcomment_author_id_fkey',
                    'column': 'author_id',
                    'references': 'auth_user(id)'
                },
                {
                    'table': 'centers_reviewcomment',
                    'constraint_name': 'centers_reviewcomment_review_id_fkey',
                    'column': 'review_id',
                    'references': 'centers_review(id)'
                },
            ]
            
            for constraint in constraint_updates:
                try:
                    # 기존 제약 조건 삭제
                    cursor.execute(f"""
                        ALTER TABLE {constraint['table']} 
                        DROP CONSTRAINT IF EXISTS {constraint['constraint_name']};
                    """)
                    
                    # CASCADE 옵션으로 새 제약 조건 추가
                    cursor.execute(f"""
                        ALTER TABLE {constraint['table']} 
                        ADD CONSTRAINT {constraint['constraint_name']} 
                        FOREIGN KEY ({constraint['column']}) 
                        REFERENCES {constraint['references']} 
                        ON DELETE CASCADE;
                    """)
                except Exception as e:
                    # 제약 조건이 이미 존재하거나 다른 이유로 실패해도 계속 진행
                    print(f"Warning: Failed to update constraint {constraint['constraint_name']}: {e}")


def reverse_foreign_keys(apps, schema_editor):
    """
    Foreign Key 제약 조건을 기본값으로 되돌림
    """
    # 이 마이그레이션은 되돌리기가 복잡하므로 pass
    # 필요시 데이터베이스 백업에서 복원해야 함
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('centers', '0006_restorehistory_media_files_count'),
    ]

    operations = [
        migrations.RunPython(
            update_foreign_keys,
            reverse_foreign_keys,
        ),
    ]
